p = ncol(x_dat)
Ts = (1:n)/n
S_l.tv = function(t,l){
out=matrix(0,nrow= p,ncol = p)
for (i in 1:n) {
out = out+x_dat[i,] %*% t(x_dat[i,]) * ((Ts[i]-t)/hr)^l * Kernel_ep( (Ts[i]-t)/hr )
}
out/(n*hr)
}
X_n_np = matrix(0, nrow = n, ncol = n*p)
for (i in 1:n) X_n_np[i, ((i-1)*p+1):(i*p) ] = x_dat[i,]
I_pO_p = matrix(0, nrow = n*p, ncol = 2*n*p)
for (i in 1:n) I_pO_p[((i-1)*p+1):(i*p), ( 2*(i-1)*p+1 ):( 2*i*p-p ) ] = diag(1,p,p)
SS_2np = matrix(0,nrow = 2*n*p, ncol = 2*n*p)
for (i in 1:n) {
t = Ts[i]
SS = rbind( cbind(S_l.tv(t,0),S_l.tv(t,1)), cbind(S_l.tv(t,1),S_l.tv(t,2)))
SS_2np[ (2*(i-1)*p+1):(2*i*p) , (2*(i-1)*p+1):(2*i*p)] = solve(SS)
}
W_2np_n = matrix(0,nrow = 2*n*p,ncol = n)
for (i in 1:n) {
W_2np_n[(  2*(i-1)*p+1 ):( (2*i-1)*p ),] = t(x_dat) * Kernel_ep( (Ts-Ts[i])/hr ) / (n*hr)
W_2np_n[( (2*i-1)*p+1 ):( 2*i*p ),] = t(x_dat) * ((Ts-Ts[i])/hr)  * Kernel_ep( (Ts-Ts[i])/hr ) / (n*hr)
}
Q_h = X_n_np %*% I_pO_p %*% SS_2np %*% W_2np_n
y_hat = Q_h %*% y_dat
GCV = mean((y_hat-y_dat)^2) / (1 - sum(diag(Q_h))/n )^2
return(GCV)
}
GCV.selector = function(y_dat,x_dat){
candidate = rule_of_thumb(y_dat, x_dat )
hrs = seq(candidate[1],candidate[2],length.out=10)
ll.gcv = c()
for (h in hrs) {
ll.gcv = c(ll.gcv, GCV.compute(y_dat = y_dat,x_dat = x_dat, hr= h))
}
hr.select = hrs[which.min(ll.gcv)]
c(candidate[1],hr.select,candidate[2])
}
process = function(ts){
# missing check
ts = ts[!is.na(ts$yyyy),]
years = seq(min(ts$yyyy), min( c(max(ts$yyyy),2024) ),by=1 )
df = matrix(NA,nrow = 12*length(years),ncol = 3)
for (i in 1:length(years)){
df[((i-1)*12+1):(i*12) , 1] = years[i]
df[ ((i-1)*12+1):(i*12) , 2] = seq(1,12,1)
}
for (i in 1:nrow(df)){
if(length(ts[ (ts$yyyy==df[i,1] & ts$mm==df[i,2]) ,3])==1){
df[i,3] = ts[ (ts$yyyy==df[i,1] & ts$mm==df[i,2]) ,3]
}
}
# interpolation
df_inter = data.frame(year=df[,1],month=df[,2],tmax=df[,3])
for (m in which(is.na(df[,3])) ) {
month_m = df[m,2]
year_m = df[m,1]
ts_m = ts(df[df[,2]==month_m,3],start=years[1],end=years[length(years)])
df_inter[m,3] = approx(x=time(ts_m),y=ts_m,xout = year_m)$y
}
# eliminate seasonal effect
# 若第一年不满，去除
while ( sum(!is.na(df_inter[df_inter$year==years[1],3]))<12 ) {
df_inter = df_inter[df_inter$year>years[1],]
years = years[-1]
}
# 若最后一年不满，去除
while ( sum(!is.na(df_inter[df_inter$year==years[length(years)],3]))<12 ) {
df_inter = df_inter[df_inter$year<years[length(years)],]
years = years[-length(years)]
}
ts_data = ts(df_inter$tmax,start=c(years[1],1),end=c(years[length(years)],12),frequency=12)
stl_data = stl(ts_data,s.window = "periodic")
seasonal_adj_data = ts_data - stl_data$time.series[,1]
return( list(ts_data=ts_data,stl_data=stl_data$time.series,seasonal_adj=seasonal_adj_data) )
}
# 临时函数，求反函数放进去 m_I^-1(t) 基于特殊的Kernel, 可以解析地算出
sum_jack <- function(lower){
if(lower >= 1){
return(0)
}else if(lower < -1){
return(1)
}else if(lower >= -1 & lower < 1){
out = 0.5 - 0.75 * lower + 0.25 * lower^3
return(out)
}
}
# local linear estimator with jack-knife
locpoly_jack <- function(x, y, xeval, hr){
XY_data <- as.data.frame(cbind(x,y))
m_hat <- locpol(y~x,data=XY_data,deg = 1,bw = hr,kernel = EpaK,xeval = xeval )
m_hat <- m_hat$lpFit
m_hat_2 <- locpol(y~x,data=XY_data,deg = 1,bw = hr/sqrt(2),kernel = EpaK, xeval = xeval )
m_hat_2 <- m_hat_2$lpFit
m_tilde <- 2*m_hat_2[,2]-m_hat[,2]
dm_est <-  2*m_hat_2[,3]-m_hat[,3]
out <- list(m=m_tilde,dm=dm_est)
out
}
# inverse monotone estimator
## Ts is vector, lambda=0 without penalization
inverse_jack <- function(Ts, ll, N, hd, hr){ # Ts support set, ll local linear estimation
out = c()
for(t in Ts){
temp <- sapply((ll-t)/hd, sum_jack)
out = c(out,mean(temp))
}
out
}
# kernel
Kernel_ep <- function(u){
support <- as.numeric(abs(u)<=1)
0.75*(1-u^2)*support
}
## kernel with jack-knife
Kernel_tilde <- function(u){
2*sqrt(2)*Kernel_ep(sqrt(2)*u)-Kernel_ep(u)
}
## kernel with jack-knife and boundary
## output K(k/n,i/N)
S_l <- function(Ts,l,hr){ #
u1 = (1-Ts)/hr; l1 = -Ts/hr
u1[u1 >1] = 1
l1[l1 < -1] = -1
out = 0.75*(u1^(l+1)/(l+1)-u1^(l+3)/(l+3)) - 0.75*(l1^(l+1)/(l+1)-l1^(l+3)/(l+3))
}
## kernel start involved in SCB
K_star <- function(n,N,hr){ # output a n*N matrix indicating K_hr(i/N-j/n)
# k from 1 to n
tk = (1:n)/n
# i from 1 to N
ti = (1:N)/N
S_0 = S_l(ti,l=0,hr=hr)
S_1 = S_l(ti,l=1,hr=hr)
S_2 = S_l(ti,l=2,hr=hr)
SS = S_0*S_2-S_1^2
out = matrix(NA,nrow = n,ncol = N)
for (k in 1:n) {
us = (tk[k]-ti)/hr
K = Kernel_ep(us)
out[k,] = (S_2*K-S_1*K*us)/SS
}
out/(n*hr)
}
K_star_tilde <- function(n,N,hr){
out = 2*K_star(n,N,hr=hr/sqrt(2))-K_star(n,N,hr=hr)
out
}
hat_M = function(x_dat,hr,t){
n = nrow(x_dat)
p = ncol(x_dat)
t_star = max(c(hr,min( c(t,1-hr) ) ) )
Ts = (1:n)/n
out=matrix(0,nrow= p,ncol = p)
for (i in 1:n) {
out = out + x_dat[i,] %*% t(x_dat[i,]) * Kernel_ep( (Ts[i]-t_star)/hr )
}
out/(n*hr)# symmetric
}
# estimate long-run covariance matrix
long_run_var_est_high = function(residuals,t.out,m,tau){ # residuals n*p matrix
residuals = as.matrix(residuals)
n = nrow(residuals)
X = (1:n)/n
delta = list()
for (i in 1:n) {
Qs = colSums(residuals[max(1,i-m):min(n,i+m),])
delta[[i]] = Qs %*% t(Qs)/(2*m+1)
}
# NW estimation
W = matrix(NA,nrow = n,ncol = length(t.out))
Y.out = list()
for (t in 1:length(t.out)) W[,t] = Kernel_ep( (t.out[t]-X)/tau )
for (t in 1:length(t.out)) {
Y.out[[t]] = Reduce('+', Map('*',W[,t],delta))/sum(W[,t])
Y.out[[t]] = sqrtm(Y.out[[t]])
}
return(Y.out)
}
Weights_star = function(ll,support,hd){
W = matrix(NA,nrow = N,ncol = length(support))
W_star = W
for (t in 1:length(support)) W[,t] = Kernel_ep( (ll[2:(N+1)]-support[t])/hd )
for (t in 1:length(support)) W_star[,t] = W[,t]/sum(W[,t])
return(W_star)
}
#### preprocess sunshine and temperature data ####
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
files = dir('../raw_data')
# not include locations.csv
files = files[files!='locations.csv']
ts_all.tmax = list()
ts_all.sun = list()
# prerocess data in heathrow and lerwick (i = 12 and 14)
names = c()
for (i in c(12,14)) {
name = substr(files[i],start = 1,stop = nchar(files[i])-8)
names = c(names,name)
raw_data = read.table(paste0('../raw_data/',files[i]),skip = 7,col.names=c('yyyy', 'mm', 'tmax','tmin','af','rain','sun')
,fill = T)
raw_data = apply(raw_data, 2, as.numeric)
ts.tmax = raw_data[,1:3]
ts.tmax = as.data.frame(ts.tmax)
ts.sun = raw_data[,c(1,2,7)]
ts.sun = as.data.frame(ts.sun)
stl_ts.tmax = process(ts.tmax)
stl_ts.sun = process(ts.sun)
ts_all.tmax[[name]] = stl_ts.tmax$seasonal_adj
ts_all.sun[[name]] = stl_ts.sun$seasonal_adj
}
# choose time series ranged from 1979 to 2023 (45 years)
ts_all = list(tmax=ts_all.tmax,sun=ts_all.sun)
ts_all.trunc = ts_all
names_all = ts_all
for (i in 1:2) {
starts = c()
ends = c()
for (j in names) {
starts = c(starts,start(ts_all[[i]][[j]])[1] )
ends = c(ends,end(ts_all[[i]][[j]])[1] )
}
ts_all.trunc[[i]] = ts_all[[i]][[1]][time(ts_all[[i]][[1]]) < 2024 & time(ts_all[[i]][[1]]) >= 1979]
for (j in which(ends>=2023 & starts<=1979) ) {
ts_all.trunc[[i]] = cbind(ts_all.trunc[[i]],  ts_all[[i]][[j]][time(ts_all[[i]][[j]]) < 2024 & time(ts_all[[i]][[j]]) >= 1979])
}
ts_all.trunc[[i]] = data.frame(ts_all.trunc[[i]][,-1])
colnames(ts_all.trunc[[i]]) = names
}
#### estimation ####
# about 14 min
sun_reg_estimations = list()
for (i in 1:2) {
n = length(ts_all.trunc$tmax[,i])
X = (1:n)/n
N = 4000
xevals = seq(0,1,by=1/N)
tmax = ts_all.trunc$tmax[,i]
sun = ts_all.trunc$sun[,i]
XX = cbind(rep(1,n),sun)
hr = GCV.selector(tmax,XX)[2]
hd = hr^3
fit1 = sapply(xevals, FUN = tv_beta,y_dat = tmax,x_dat = XX, hr=hr/sqrt(2))
fit2 = sapply(xevals, FUN = tv_beta,y_dat = tmax,x_dat = XX, hr=hr)
ll = t(2*fit1)-t(fit2)
y.hat = ll[(1:n)*floor(N/n),1]+ll[(1:n)*floor(N/n),2] * sun
residuals = y.hat-tmax
residuals_m = XX*residuals
hat_Sigma = long_run_var_est_high(residuals = residuals_m,t.out = X,m = floor(n^(2/7)), tau = n^(-1/7))
hat_M_station = list()
for (j in 1:n) {
hat_M_station[[j]] = hat_M(x_dat = XX,hr=hr,t=X[j])
}
Sigma = rep(NA , n)
for (j in 1:n) {
Sigma_temp = solve(hat_M_station[[j]])  %*% ( (hat_Sigma[[j]])^2 ) %*% solve(hat_M_station[[j]])
Sigma[j] = t(c(0,1)) %*% Sigma_temp %*% c(0,1)
Sigma[j] = sqrt(Sigma[j])
}
# monotone estimation
support = seq( min(ll[-1,2]), max(ll[-1,2]), length.out=n)
monotone = inverse_jack(Ts=support,ll=ll[,2],N=N,hd=hd,hr=hr)
weights = Weights_star(ll=ll[,2],support = support,hd=hd)
sun_reg_estimations[[i]] = list(monotone=monotone,support=support,weight=weights,ll=ll,hr.gcv=hr,data=cbind(tmax,XX),Sigma=Sigma)
}
save(sun_reg_estimations,file= '../estimation/regression_sun.RData')
library(foreach)
library(doParallel)
library(Matrix)
library(PLRModels)
library(expm)
library(MASS)
#### functions ####
# kernel
Kernel_ep <- function(u){
support <- as.numeric(abs(u)<=1)
0.75*(1-u^2)*support
}
## kernel with jack-knife
Kernel_tilde <- function(u){
2*sqrt(2)*Kernel_ep(sqrt(2)*u)-Kernel_ep(u)
}
## kernel with jack-knife and boundary
## output K(k/n,i/N)
S_l <- function(Ts,l,hr){ #
u1 = (1-Ts)/hr; l1 = -Ts/hr
u1[u1 >1] = 1
l1[l1 < -1] = -1
out = 0.75*(u1^(l+1)/(l+1)-u1^(l+3)/(l+3)) - 0.75*(l1^(l+1)/(l+1)-l1^(l+3)/(l+3))
}
## kernel start involved in SCB
K_star <- function(n,N,hr){ # output a n*N matrix indicating K_hr(i/N-j/n)
# k from 1 to n
tk = (1:n)/n
# i from 1 to N
ti = (1:N)/N
S_0 = S_l(ti,l=0,hr=hr)
S_1 = S_l(ti,l=1,hr=hr)
S_2 = S_l(ti,l=2,hr=hr)
SS = S_0*S_2-S_1^2
out = matrix(NA,nrow = n,ncol = N)
for (k in 1:n) {
us = (tk[k]-ti)/hr
K = Kernel_ep(us)
out[k,] = (S_2*K-S_1*K*us)/SS
}
out/(n*hr)
}
K_star_tilde <- function(n,N,hr){
out = 2*K_star(n,N,hr=hr/sqrt(2))-K_star(n,N,hr=hr)
out
}
#### functions for bootstrap ####
Gaussian_gen = function(Sigma,n,Kds){
# Sigma is the long run variance over n
# Kds is a n*N matrix obtained from K_star_tilde(n,N,hr)
V = rnorm(n)
out = t(Kds) %*% (Sigma * V)
out
}
# bootstrap for once: bootstrap a n*1 vector
bootstrap = function(Kds, n, N, hr, Sigma, ...){
Gk = Gaussian_gen(Sigma=Sigma,n=n,Kds=Kds)
Wi = Weights_star(...)
abs(t(Wi) %*% Gk)
}
bootstrap.zhou = function(n,hr,xevals){
V = rnorm(n)
hj = hr/sqrt(2)
G_p = rep(NA,length(xevals))
X = (1:n)/n
for (i in 1:length(xevals) ) {
G_p[i] = sum(( 2*Kernel_ep( (X-xevals[i])/hj )/(n*hj) - Kernel_ep( (X-xevals[i])/hr )/(n*hr) )*V )
}
max(abs(G_p[xevals > hr & xevals < 1-hr]))
}
#### bootstrap ####
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load('../estimation/regression_sun.RData')
n = length(sun_reg_estimations[[1]]$monotone)
X = (1:n)/n
N = 4000
xevals = seq(0,1,by=1/N)
boot_sample = list()
B = 2000
Sigma_ls = list()
# this may take 10 min
for (i in c(1,2)) {
data_ls = sun_reg_estimations[[i]]
tmax = data_ls$data[,1]
sun = data_ls$data[,3]
hr = data_ls$hr.gcv
hd = hr^3
Kds_stat = K_star_tilde(n=n,N=N,hr=hr)
bound.m = data_ls$monotone > hr & data_ls$monotone < 1-hr
time1 = Sys.time()
boots.all = matrix(NA,nrow = B,ncol = 3)
for (b in 1:B) {
set.seed( 5000*(i-1)+b )
Gk = Gaussian_gen(Sigma=data_ls$Sigma,n=n,Kds=Kds_stat)
boots = abs(t(data_ls$weight) %*% Gk)
max_boots = max(boots,na.rm = TRUE)
max_boots.b = max(boots[bound.m],na.rm = TRUE)
max_boots.zhou = bootstrap.zhou(n=n,hr=hr,xevals = seq(0,1,by=1/N))
boots.all[b,] = c(max_boots,max_boots.b,max_boots.zhou)
}
time2 = Sys.time()
print(time2-time1)
# SCBs
boot_sample[[i]] = boots.all
}
save(boot_sample,file = '../estimation/boot_reg.RData')
#########  figure B.3 and its p-values ###########
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load('../estimation/regression_sun.RData')
load('../estimation/boot_reg.RData')
n = length(sun_reg_estimations[[1]]$monotone)
X = (1:n)/n
N = 4000
xevals = seq(0,1,by=1/N)
# one_station: plot zhou's SCB, iso SCB, monotone SCB
SCB_design = function(boot_sample,q){ # generate upper&lower bounds for zhou's SCB, iso SCB, monotone SCB single q
SCB_zhou_ul = list()
SCB_iso_ul = list()
SCB_mon_ul = list()
for (i in 1:2) {
data_ls = sun_reg_estimations[[i]]
# SCB zhou
SCB.zhou = data_ls$Sigma * quantile(boot_sample[[i]][,3],q)
hr = data_ls$hr.gcv
bound = X>hr & X<1-hr
bound.N = xevals > hr & xevals < 1-hr
bound.m = data_ls$monotone > hr & data_ls$monotone < 1-hr
ll.n = data_ls$ll[ (1:n)*floor(N/n) ,2]
SCB_zhou_ul[[i]] = cbind(ll.n[bound]+SCB.zhou[bound],ll.n[bound]-SCB.zhou[bound])
# SCB iso
y.i.u = isoreg( x = X[bound],y = ll.n[bound]+SCB.zhou[bound])
y.i.l = isoreg( x = X[bound],y = ll.n[bound]-SCB.zhou[bound])
SCB_iso_ul[[i]] = cbind(y.i.u$yf , y.i.l$yf)
# SCB monotone
SCB.b = quantile(boot_sample[[i]][,2],q)
SCB_mon_ul[[i]] = cbind(data_ls$support[bound.m]+ SCB.b,data_ls$support[bound.m]- SCB.b )
}
return(list(zhou=SCB_zhou_ul,iso=SCB_iso_ul,mon=SCB_mon_ul))
}
SCBs_90 = SCB_design(boot_sample,0.9)
SCBs_95 = SCB_design(boot_sample,0.95)
names = c('Heathrow','Lerwick')
# plot Figure B.3(a)
png('../figures/Figure B.3(a).png',width =400,height = 450,res=100 )
par(mfrow=c(2,1), mai=c(0.5,0.8,0.5,0.1),omi=c(0.1,0.1,0.1,0.1))
for (i in 1:2) {
ymax = max( SCBs_95$zhou[[i]],SCBs_95$iso[[i]],SCBs_95$mon[[i]] )
ymin = min( SCBs_95$zhou[[i]],SCBs_95$iso[[i]],SCBs_95$mon[[i]] )
data_ls = sun_reg_estimations[[i]]
hr = data_ls$hr.gcv
bound = X>hr & X<1-hr
bound.N = xevals > hr & xevals < 1-hr
ll.n = data_ls$ll[ (1:n)*floor(N/n) ,2]
# Zhou's SCB
year_evals = seq(1979,2023,length.out=length(xevals))
year_X = seq(1979,2023,length.out=length(X))
plot(year_X[bound],ll.n[bound],'l',xaxt="n",yaxt="n",ann=F,ylim = c(ymin*1.1,ymax*1.1))
axis(1,cex.axis=0.8,tcl=-0.2,mgp=c(3,0.2,0))#,at=c(1990,1995,2000,2005,2010))
axis(2,cex.axis=0.8,tcl=-0.2,mgp=c(3,0.2,0))
title(ylab='sunshine coefficient',line=2)
title(xlab='Year',line=1.5)
title(main= names[i] ,line=0.8)
abline(h=0)
# SCB90
lines(year_X[bound],SCBs_90$zhou[[i]][,1],lty='dotted')
lines(year_X[bound],SCBs_90$zhou[[i]][,2],lty='dotted')
#SCB95
lines(year_X[bound],SCBs_95$zhou[[i]][,1],lty='dashed')
lines(year_X[bound],SCBs_95$zhou[[i]][,2],lty='dashed')
}
dev.off()
# plot Figure B.3(b)
png('../figures/Figure B.3(b).png',width =400,height = 450,res=100 )
par(mfrow=c(2,1), mai=c(0.5,0.8,0.5,0.1),omi=c(0.1,0.1,0.1,0.1))
for (i in 1:2) {
ymax = max( SCBs_95$zhou[[i]],SCBs_95$iso[[i]],SCBs_95$mon[[i]] )
ymin = min( SCBs_95$zhou[[i]],SCBs_95$iso[[i]],SCBs_95$mon[[i]] )
data_ls = sun_reg_estimations[[i]]
hr = data_ls$hr.gcv
bound = X>hr & X<1-hr
bound.N = xevals > hr & xevals < 1-hr
ll.n = data_ls$ll[ (1:n)*floor(N/n) ,2]
y.i = isoreg( x = xevals[bound.N],y = data_ls$ll[bound.N,2])
# improved SCB
year_evals = seq(1979,2023,length.out=length(xevals))
year_X = seq(1979,2023,length.out=length(X))
plot(year_evals[bound.N],y.i$yf,'l',xaxt="n",yaxt="n",ann=F,ylim =c(ymin*1.1,ymax*1.1),col='blue')
axis(1,cex.axis=0.8,tcl=-0.2,mgp=c(3,0.2,0))#,at=c(1990,1995,2000,2005,2010))
axis(2,cex.axis=0.8,tcl=-0.2,mgp=c(3,0.2,0))
title(ylab='sunshine coefficient',line=2)
title(xlab='Year',line=1.5)
title(main= names[i] ,line=0.8)
abline(h=0)
# SCB90
lines(year_X[bound],SCBs_90$iso[[i]][,1],lty='dotted',col='blue')
lines(year_X[bound],SCBs_90$iso[[i]][,2],lty='dotted',col='blue')
#SCB95
lines(year_X[bound],SCBs_95$iso[[i]][,1],lty='dashed',col='blue')
lines(year_X[bound],SCBs_95$iso[[i]][,2],lty='dashed',col='blue')
}
dev.off()
# plot Figure B.3(c)
png('../figures/Figure B.3(c).png',width =400,height = 450,res=100 )
par(mfrow=c(2,1), mai=c(0.5,0.8,0.5,0.1),omi=c(0.1,0.1,0.1,0.1))
for (i in 1:2) {
ymax = max( SCBs_95$zhou[[i]],SCBs_95$iso[[i]],SCBs_95$mon[[i]] )
ymin = min( SCBs_95$zhou[[i]],SCBs_95$iso[[i]],SCBs_95$mon[[i]] )
data_ls = sun_reg_estimations[[i]]
hr = data_ls$hr.gcv
bound.m = data_ls$monotone > hr & data_ls$monotone < 1-hr
ll.n = data_ls$ll[ (1:n)*floor(N/n) ,2]
# improved SCB
year_monotone = 1979 + (2023-1979) * data_ls$monotone
plot(year_monotone[bound.m],data_ls$support[bound.m],col='red','l',ylim=c(1.1*ymin,1.1*ymax),
xaxt="n",yaxt="n",ann=F)
axis(1,cex.axis=0.8,tcl=-0.2,mgp=c(3,0.2,0))#,at=c(1990,1995,2000,2005,2010))
axis(2,cex.axis=0.8,tcl=-0.2,mgp=c(3,0.2,0))
title(ylab='sunshine coefficient',line=2)
title(xlab='Year',line=1.5)
title(main= names[i] ,line=0.8)
abline(h=0)
#lines(data_ls$monotone[bound.m],data_ls$support[bound.m],col='red')
# SCB90
lines(year_monotone[bound.m],SCBs_90$mon[[i]][,1],col='red',lty="dotted")
lines(year_monotone[bound.m],SCBs_90$mon[[i]][,2],col='red',lty="dotted")
#SCB95
lines(year_monotone[bound.m],SCBs_95$mon[[i]][,1],col='red',lty="dashed")
lines(year_monotone[bound.m],SCBs_95$mon[[i]][,2],col='red',lty="dashed")
}
dev.off()
######## compute p-values ########
lower_qs = lapply(seq(0,1,0.001), FUN=SCB_design, boot_sample=boot_sample)
check_p_values = function(station_index=1,qs=lower_qs){
min_lower = matrix(NA,nrow = length(qs),ncol=3)
for (k in 1:length(qs)) {
min_lower[k,1] = min(qs[[k]]$zhou[[station_index]][,2])
min_lower[k,2] = min(qs[[k]]$iso[[station_index]][,2])
min_lower[k,3] = min(qs[[k]]$mon[[station_index]][,2])
}
p.zhou = 1 - (which.min(abs(min_lower[,1]))-1)/1000
p.iso = 1 - (which.min(abs(min_lower[,2]))-1)/1000
p.mon = 1 - (which.min(abs(min_lower[,3]))-1)/1000
return(c(p.zhou,p.iso,p.mon))
}
check_p_values(1,lower_qs)
check_p_values(2,lower_qs)
